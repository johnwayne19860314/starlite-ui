# 定义工作流的名称
name: Build and Push Docker Image

# 定义触发工作流的条件
on:
  workflow_dispatch: # 允许手动触发工作流
  push: # 当有代码推送事件发生时
    branches:
      - baseimage 
# 定义工作流的任务
jobs:
  build-image:
    # 定义运行此任务的环境：最新版本的 ubuntu
    runs-on: ubuntu-latest

    # 定义任务中的步骤
    steps:
      # 检出代码。只检出最新的1次提交
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 设置 QEMU 模拟器，这通常用于多平台的 Docker 构建
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 设置 Docker Buildx，用于构建多平台的 Docker 镜像
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 登录到 Docker Hub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # 使用存储在 GitHub Secrets 中的 DockerHub 用户名
          password: ${{ secrets.DOCKER_PASSWORD }} # 使用存储在 GitHub Secrets 中的 DockerHub 密码

      # 登录到 ghcr.io (GitHub Container Registry)
      # - name: Login to ghcr.io
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }} # 使用仓库的拥有者名作为用户名
      #     password: ${{ secrets.GHCR_TOKEN }} # 使用存储在 GitHub Secrets 中的 ghcr.io 的访问令牌
      # ghcr.io/${{ github.repository_owner }}/xxxx:latest
      
      # 构建并推送 Docker 镜像到 docker.io 和 ghcr.io
      - name: Build and push Docker images to docker.io
        uses: docker/build-push-action@v2
        # run: |
        #   docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        with:
          platforms: linux/amd64 # 设置构建平台为 linux/amd64
          context: . # Docker 构建上下文设置为当前目录
          push: true # 设置为真以确保构建后的镜像被推送
          tags: | # 定义推送的标签
            ${{ secrets.DOCKER_USERNAME }}/starlite-front:latest

 
            
